module.exports = {
  config: {
    name: "bet",
    version: "1.0",
    author: "ЁЭРАЁЭРлЁЭРЪЁЭРЯЁЭРЪЁЭРн",
    shortDescription: {
      en: "ржмрзЗржЯ ржЧрзЗржо",
    },
    longDescription: {
      en: "ржмрзЗржЯ ржЧрзЗржоред",
    },
    category: "ЁЭЧЪЁЭЧФЁЭЧаЁЭЧШ",
  },
  langs: {
    en: {
      invalid_amount: "ржПржХржЯрж┐ рж╕ржарж┐ржХ ржПржмржВ ржкржЬрж┐ржЯрж┐ржн ржкрж░рж┐ржорж╛ржг ржжрж┐ржи ржпрж╛рждрзЗ ржЖржкржирж┐ ржбрж╛ржмрж▓ ржЬрзЗрждрж╛рж░ рж╕рзБржпрзЛржЧ ржкрж╛ржиред",
      not_enough_money: "ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржПржЗ ржкрж░рж┐ржорж╛ржг ржмрзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржкрж░рзНржпрж╛ржкрзНржд ржЯрж╛ржХрж╛ ржирзЗржЗред",
      win_message: "ржЖржкржирж┐ $%1 ржЬрж┐рждрзЗржЫрзЗржи, ржмржирзНржзрзБ!",
      lose_message: "ржЖржкржирж┐ $%1 рж╣рж╛рж░рж┐рзЯрзЗржЫрзЗржи, ржмржирзНржзрзБред",
      jackpot_message: "ржЬрзНржпрж╛ржХржкржЯ! ржЖржкржирж┐ $%1 ржЬрж┐рждрзЗржЫрзЗржи рждрж┐ржиржЯрж┐ %2 рж╕рзНрж▓ржЯ ржирж┐рзЯрзЗ, ржмржирзНржзрзБ!",
      spin_message: "рж╕рзНржкрж┐ржи рж╣ржЪрзНржЫрзЗ...",
      balance_message: "ржЖржкржирж╛рж░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: $%1",
    },
  },

  onStart: async function ({ args, message, event, usersData, getLang }) {
    const { senderID } = event;
    const userData = await usersData.get(senderID);
    const amount = parseInt(args[0]);

    if (isNaN(amount) || amount <= 0) {
      return message.reply(getLang("invalid_amount"));
    }

    if (amount > userData.money) {
      return message.reply(getLang("not_enough_money"));
    }

    // рж╕рзНрж▓ржЯ ржЗржорзЛржЬрж┐ рж▓рж┐рж╕рзНржЯ
    const slots = ["ЁЯТЪ", "ЁЯТЫ", "ЁЯТЩ", "ЁЯТЫ", "ЁЯТЪ", "ЁЯТЩ", "ЁЯТЩ", "ЁЯТЫ", "ЁЯТЪ"];
    const slot1 = slots[Math.floor(Math.random() * slots.length)];
    const slot2 = slots[Math.floor(Math.random() * slots.length)];
    const slot3 = slots[Math.floor(Math.random() * slots.length)];

    const winnings = calculateWinnings(slot1, slot2, slot3, amount);
    const newBalance = userData.money + winnings;

    await usersData.set(senderID, {
      money: newBalance,
      exp: userData.exp,
      data: userData.data,
    });

    const messageText = getSpinResultMessage(slot1, slot2, slot3, winnings, newBalance, getLang);

    return message.reply(messageText);
  },
};

// ржЬрзЗрждрж╛рж░ рж╣рж┐рж╕рж╛ржм
function calculateWinnings(slot1, slot2, slot3, betAmount) {
  if (slot1 === "ЁЯТЪ" && slot2 === "ЁЯТЪ" && slot3 === "ЁЯТЪ") {
    return betAmount * 10;
  } else if (slot1 === "ЁЯТЫ" && slot2 === "ЁЯТЫ" && slot3 === "ЁЯТЫ") {
    return betAmount * 5;
  } else if (slot1 === slot2 && slot2 === slot3) {
    return betAmount * 3;
  } else if (slot1 === slot2 || slot1 === slot3 || slot2 === slot3) {
    return betAmount * 2;
  } else {
    return -betAmount;
  }
}

// ржлрж▓рж╛ржлрж▓ ржорзЗрж╕рзЗржЬ
function getSpinResultMessage(slot1, slot2, slot3, winnings, balance, getLang) {
  const result = `[ ${slot1} | ${slot2} | ${slot3} ]`;
  if (winnings > 0) {
    if (slot1 === "ЁЯТЩ" && slot2 === "ЁЯТЩ" && slot3 === "ЁЯТЩ") {
      return `${getLang("jackpot_message", winnings, "ЁЯТЩ")}\n${result}\n${getLang("balance_message", balance)}`;
    } else {
      return `${getLang("win_message", winnings)}\n${result}\n${getLang("balance_message", balance)}`;
    }
  } else {
    return `${getLang("lose_message", -winnings)}\n${result}\n${getLang("balance_message", balance)}`;
  }
}
